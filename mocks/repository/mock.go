// Code generated by MockGen. DO NOT EDIT.
// Source: repository/repository.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	model "bootcamp/model"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockIRepository is a mock of IRepository interface.
type MockIRepository struct {
	ctrl     *gomock.Controller
	recorder *MockIRepositoryMockRecorder
}

// MockIRepositoryMockRecorder is the mock recorder for MockIRepository.
type MockIRepositoryMockRecorder struct {
	mock *MockIRepository
}

// NewMockIRepository creates a new mock instance.
func NewMockIRepository(ctrl *gomock.Controller) *MockIRepository {
	mock := &MockIRepository{ctrl: ctrl}
	mock.recorder = &MockIRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIRepository) EXPECT() *MockIRepositoryMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockIRepository) Add(customer model.Customer) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Add", customer)
}

// Add indicates an expected call of Add.
func (mr *MockIRepositoryMockRecorder) Add(customer interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockIRepository)(nil).Add), customer)
}

// Customers mocks base method.
func (m *MockIRepository) Customers() *[]model.Customer {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Customers")
	ret0, _ := ret[0].(*[]model.Customer)
	return ret0
}

// Customers indicates an expected call of Customers.
func (mr *MockIRepositoryMockRecorder) Customers() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Customers", reflect.TypeOf((*MockIRepository)(nil).Customers))
}

// GetCustomerByUsername mocks base method.
func (m *MockIRepository) GetCustomerByUsername(username string) (*model.Customer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCustomerByUsername", username)
	ret0, _ := ret[0].(*model.Customer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCustomerByUsername indicates an expected call of GetCustomerByUsername.
func (mr *MockIRepositoryMockRecorder) GetCustomerByUsername(username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCustomerByUsername", reflect.TypeOf((*MockIRepository)(nil).GetCustomerByUsername), username)
}

// Update mocks base method.
func (m *MockIRepository) Update(customer model.Customer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", customer)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockIRepositoryMockRecorder) Update(customer interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockIRepository)(nil).Update), customer)
}
